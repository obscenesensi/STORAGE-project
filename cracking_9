import java.util.Arrays;

/**
 * 1.7
 * Write an algorithm such that if an element in an MxN matrix is 0, its entire row
 * and column are set to 0.
 */
public class FillArray {
   public static void fillArray(int[][] arr) {
      for (int i = 0; i < arr.length; i++) {
         for (int j = 0; j < arr[i].length; j++) {
            if (arr[i][j] != 0
                  && ((i > 0 && arr[i-1][j] == 0) || (j > 0 && arr[i][j-1] ==0))) {
               arr[i][j] = 0;      
            } else if (arr[i][j] == 0) {
               fillLeft(arr, i, j);
               fillUp(arr, i, j);
            }
         }
      }
   }
   
   private static void fillLeft(int[][] arr, int row, int startCol) {
      if (startCol == 0) {
         return;
      }
      int[] slice = arr[row];
      for (int j = startCol; j >= 0; j--) {
         if (slice[j] == 0) {
            return;
         }
         slice[j] = 0;
      }
   }
   
   private static void fillUp(int[][] arr, int startRow, int col) {
      if (startRow == 0) {
         return;
      }
      for (int i = startRow; i >= 0; i--) {
         if (arr[i][col] == 0) {
            return;
         }
         arr[i][col] = 0;
      }
   }
   
   public static void main(String[] args) {
      int[][] arr = 
      {{0, -1, 1, 1},
       {1,  2,11,-4},
       {3,  4, 0, 1}};
      fillArray(arr);
      System.out.println(Arrays.deepToString(arr));
   }
}
